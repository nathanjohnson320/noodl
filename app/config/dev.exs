use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :noodl, NoodlWeb.Endpoint,
  http: [port: 4000],
  https: [
    port: 4001,
    cipher_suite: :strong,
    certfile: "priv/cert/selfsigned.pem",
    keyfile: "priv/cert/selfsigned_key.pem"
  ],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch-stdin",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :noodl, NoodlWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/noodl_web/{live,views}/.*(ex)$",
      ~r"lib/noodl_web/templates/.*(eex)$",
      ~r"lib/noodl_web/.*(leex)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Configure your database
config :noodl, Noodl.Repo,
  username: System.get_env("DB_USER") || "postgres",
  password: "postgres",
  database: "noodl_dev",
  hostname: "localhost",
  pool_size: 10

config :noodl,
  recording_client: API.RecordingLocal

config :noodl, Noodl.Emails.Mailer, adapter: Bamboo.LocalAdapter, username: "no-reply@noodl.tv"

config :waffle,
  storage: Waffle.Storage.Local

config :ex_aws,
  access_key_id: [{:system, "AWS_ACCESS_KEY_ID"}, :instance_role],
  secret_access_key: [{:system, "AWS_SECRET_ACCESS_KEY"}, :instance_role]

config :noodl,
  agora_app_id: System.get_env("AGORA_APP_ID"),
  agora_certificate: System.get_env("AGORA_CERT")

config :noodl, :strategies,
  github: [
    client_id: System.get_env("GITHUB_CLIENT_ID"),
    client_secret: System.get_env("GITHUB_SECRET"),
    strategy: Assent.Strategy.Github,
    redirect_uri: "http://localhost:4000/github/oauth/callback"
  ],
  google: [
    client_id: System.get_env("GOOGLE_CLIENT_ID"),
    client_secret: System.get_env("GOOGLE_SECRET"),
    strategy: Assent.Strategy.Google,
    redirect_uri: "http://localhost:4000/google/oauth/callback"
  ],
  apple: [
    client_id: System.get_env("APPLE_CLIENT_ID"),
    team_id: System.get_env("APPLE_TEAM_ID"),
    private_key_id: System.get_env("APPLE_PRIVATE_KEY_ID"),
    strategy: Assent.Strategy.Apple,
    # This needs to be over valid SSL because apple requires it
    redirect_uri: "https://d058deeaa27b.ngrok.io/apple/oauth/callback",
    private_key: System.get_env("APPLE_PRIVATE_KEY")
  ]
